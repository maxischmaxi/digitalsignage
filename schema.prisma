generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Display {
  id           String      @id @default(uuid())
  name         String
  orgId        String?
  Org          Org?        @relation(fields: [orgId], references: [id])
  Location     Location    @relation(fields: [locationId], references: [id])
  locationId   String
  timeframes   Timeframe[]
  screenWidth  Int         @default(1920)
  screenHeight Int         @default(1080)
}

model Location {
  id          String    @id @default(uuid())
  name        String
  description String
  address     String
  city        String
  state       String
  zip         String
  Display     Display[]
  Org         Org       @relation(fields: [orgId], references: [id])
  orgId       String
}

model Layout {
  id        String      @id @default(uuid())
  name      String
  Timeframe Timeframe[]
  type      LayoutType
  data      String?
  url       String?
  Org       Org         @relation(fields: [orgId], references: [id])
  orgId     String
}

model Timeframe {
  id        String   @id @default(uuid())
  start     DateTime
  end       DateTime
  layoutId  String
  Layout    Layout   @relation(fields: [layoutId], references: [id])
  Display   Display? @relation(fields: [displayId], references: [id])
  displayId String?
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  currentOrg    String?
  Orgs          Org[]
  Media         Media[]
  UsersOnOrgs   UsersOnOrgs[]
  OrgPermission OrgPermission[]
}

model OrgPermission {
  id          String       @id @default(uuid())
  org         Org          @relation(fields: [orgId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  orgId       String
  userId      String
  permissions Permission[]
}

model Org {
  id            String          @id @default(uuid())
  name          String
  icon          String
  Plan          Plan
  Media         Media[]
  Users         User[]
  UsersOnOrgs   UsersOnOrgs[]
  OrgPermission OrgPermission[]
  Displays      Display[]
  Location      Location[]
  Layout        Layout[]
}

model UsersOnOrgs {
  userId     String
  orgId      String
  assignedBy String
  assignedAt DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
  Org        Org      @relation(fields: [orgId], references: [id])

  @@id([userId, orgId])
}

model Media {
  id         String  @id @default(uuid())
  uploadedBy User    @relation(fields: [userId], references: [id])
  userId     String
  Org        Org?    @relation(fields: [orgId], references: [id])
  orgId      String?
  name       String
  key        String
  size       Float
  url        String
}

enum Permission {
  SIGNAGE_READ
  DISPLAYS_READ
  LAYOUTS_READ
  TIMELINE_READ
  PLATFORM
  MEDIA
  IMAGES_READ
  VIDEOS_READ
  DELETE_MEDIA
  LOCATIONS
}

enum LayoutType {
  PDF
  CANVAS
  IMAGE
  VIDEO
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}
